KidsStoryCreator/
├── android/                  # Android native files
├── ios/                     # iOS native files
├── src/
│   ├── @types/             # Global TypeScript type definitions
│   │   ├── navigation.d.ts # Navigation type definitions
│   │   └── env.d.ts       # Environment variables types
│   │
│   ├── api/               # API related code
│   │   ├── client.ts     # API client setup
│   │   ├── endpoints.ts  # API endpoints
│   │   └── types.ts      # API type definitions
│   │
│   ├── assets/           # Static assets
│   │   ├── images/
│   │   ├── fonts/
│   │   └── sounds/
│   │
│   ├── components/       # Reusable components
│   │   ├── common/      # Shared components
│   │   │   ├── Button.tsx
│   │   │   ├── Input.tsx
│   │   │   └── types.ts
│   │   │
│   │   ├── drawing/     # Drawing related components
│   │   │   ├── Canvas.tsx
│   │   │   ├── Controls.tsx
│   │   │   └── types.ts
│   │   │
│   │   └── story/       # Story related components
│   │       ├── Viewer.tsx
│   │       ├── Controls.tsx
│   │       └── types.ts
│   │
│   ├── hooks/           # Custom hooks
│   │   ├── useCamera.ts
│   │   ├── useStory.ts
│   │   └── useAuth.ts
│   │
│   ├── navigation/      # Navigation setup
│   │   ├── AppNavigator.tsx
│   │   ├── AuthNavigator.tsx
│   │   └── types.ts
│   │
│   ├── screens/         # Screen components
│   │   ├── auth/
│   │   │   ├── LoginScreen.tsx
│   │   │   └── RegisterScreen.tsx
│   │   │
│   │   ├── drawing/
│   │   │   ├── DrawingScreen.tsx
│   │   │   └── types.ts
│   │   │
│   │   └── story/
│   │       ├── StoryScreen.tsx
│   │       └── types.ts
│   │
│   ├── services/        # Business logic services
│   │   ├── auth.ts
│   │   ├── drawing.ts
│   │   └── story.ts
│   │
│   ├── store/          # Redux store
│   │   ├── slices/
│   │   │   ├── authSlice.ts
│   │   │   ├── drawingSlice.ts
│   │   │   └── storySlice.ts
│   │   │
│   │   ├── hooks.ts
│   │   └── index.ts
│   │
│   ├── theme/          # Styling and theme
│   │   ├── colors.ts
│   │   ├── spacing.ts
│   │   └── typography.ts
│   │
│   ├── utils/          # Utility functions
│   │   ├── storage.ts
│   │   ├── validation.ts
│   │   └── formatters.ts
│   │
│   └── App.tsx         # Root component
│
├── .env               # Environment variables
├── .eslintrc.js      # ESLint configuration
├── .prettierrc       # Prettier configuration
├── app.json          # React Native configuration
├── babel.config.js   # Babel configuration
├── index.js          # Entry point
├── package.json      # Dependencies and scripts
├── tsconfig.json     # TypeScript configuration
└── README.md         # Project documentation
















web-app/
├── public/           # Static files
│   ├── index.html
│   ├── favicon.ico
│   └── assets/
│       ├── images/
│       └── sounds/
│
├── src/
│   ├── @types/      # Global TypeScript type definitions
│   │   ├── app.d.ts
│   │   └── env.d.ts
│   │
│   ├── api/         # API related code
│   │   ├── client.ts
│   │   ├── endpoints.ts
│   │   └── types.ts
│   │
│   ├── components/  # Reusable components
│   │   ├── common/
│   │   │   ├── Button/
│   │   │   │   ├── Button.tsx
│   │   │   │   ├── Button.test.tsx
│   │   │   │   ├── Button.styles.ts
│   │   │   │   └── types.ts
│   │   │   │
│   │   │   └── Input/
│   │   │
│   │   ├── drawing/
│   │   │   ├── Canvas/
│   │   │   └── Controls/
│   │   │
│   │   └── story/
│   │       ├── Viewer/
│   │       └── Navigation/
│   │
│   ├── constants/   # Application constants
│   │   ├── routes.ts
│   │   └── config.ts
│   │
│   ├── hooks/       # Custom hooks
│   │   ├── useWebcam.ts
│   │   ├── useStory.ts
│   │   └── useAuth.ts
│   │
│   ├── layouts/     # Page layouts
│   │   ├── MainLayout.tsx
│   │   └── AuthLayout.tsx
│   │
│   ├── pages/       # Page components
│   │   ├── auth/
│   │   │   ├── LoginPage.tsx
│   │   │   └── RegisterPage.tsx
│   │   │
│   │   ├── drawing/
│   │   │   ├── DrawingPage.tsx
│   │   │   └── types.ts
│   │   │
│   │   └── story/
│   │       ├── StoryPage.tsx
│   │       └── types.ts
│   │
│   ├── services/    # Business logic services
│   │   ├── auth.ts
│   │   ├── drawing.ts
│   │   └── story.ts
│   │
│   ├── store/       # Redux store
│   │   ├── slices/
│   │   ├── hooks.ts
│   │   └── index.ts
│   │
│   ├── styles/      # Global styles
│   │   ├── global.css
│   │   ├── theme.ts
│   │   └── variables.ts
│   │
│   ├── utils/       # Utility functions
│   │   ├── storage.ts
│   │   ├── validation.ts
│   │   └── formatters.ts
│   │
│   └── App.tsx      # Root component
│
├── .env             # Environment variables
├── .eslintrc.js    # ESLint configuration
├── .prettierrc     # Prettier configuration
├── package.json    # Dependencies and scripts
├── tsconfig.json   # TypeScript configuration
├── vite.config.ts  # Vite configuration (if using Vite)
└── README.md       # Project documentation


Would you like me to:

Create example files for any specific part?
Show setup for shared types between mobile and web?
Add configuration files (ESLint, TypeScript, etc.)?
Create example components with proper TypeScript usage?
Show how to share code between mobile and web?

Key points about this structure:

Separate concerns clearly
Type definitions close to their usage
Reusable components structure
Clear separation of business logic
Easy to scale and maintain
Clear import paths